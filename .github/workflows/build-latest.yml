name: Build Flarial dll and add to newcdn as a release.
on:
  push:
    branches: [ "main", "scripting-v2" ]
  pull_request:
    branches: [ "main", "scripting-v2" ]
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  windows-build:
    runs-on: windows-latest
    outputs:
      type: ${{ steps.type.outputs.status }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: "Check commit type"
        id: type
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"nightly:"* ]]; then
              echo "Continuing to build as nightly"
              echo "status=0" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event.head_commit.message }}" == *"release:"* ]]; then
              echo "Continuing to build as release"
              echo "status=1" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event.head_commit.message }}" == *"beta:"* ]]; then
              echo "Continuing to build as beta"
              echo "status=2" >> "$GITHUB_OUTPUT"
          else
              echo "Not a build commit, exiting"
              gh run cancel ${{ github.run_id }}
              gh run watch ${{ github.run_id }}f
              exit 0
          fi
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Up MSVC Environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure CMake
        run: |
          #echo 'hi'
          
          cmake -S . -B build -G "Ninja" -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_STANDARD=23 -DCMAKE_BUILD_TYPE=Release


      - name: Build DLL
        run: |
           cmake --build build
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.6.1
        with:
           name: Flarial_DLL
           path: D:\a\dll\dll\build\Flarial.dll

  upload-to-cdn:
    runs-on: ubuntu-latest
    needs: windows-build
    steps:
      - name: Output commit type
        run: echo " ${{env.OUTPUT1}} $OUTPUT1"
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
      - name: Checkout newcdn repository
        uses: actions/checkout@v4
        with:
          repository: 'flarialmc/newcdn'
          ref: 'main'
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
      - name: Download dll
        uses: actions/download-artifact@v4.1.9
      - name: setup nightly tag
        id: tag
        run: |
          echo "TAG_NAME=nightly-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
      - name: Nightly Release
        uses: softprops/action-gh-release@v2
        with:
          files:
            Flarial_DLL/Flarial.dll
          tag_name: ${{ env.TAG_NAME}}
          body: ${{ github.event.head_commit.message }}
          name: "Nightly Release"
          repository: flarialmc/newcdn
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        if: ${{ env.OUTPUT1 == 0 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
      - name: Release
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@example.com"
          mv -f Flarial_DLL/Flarial.dll "./dll/latest.dll"
          git add ./dll/latest.dll
          git commit -m "Add Release for Release Commit: '${{ github.event.head_commit.message }}'"
          git push origin main
          echo "uploading as release"
        if: ${{ env.OUTPUT1 == 1 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
      - name: Release as beta
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@example.com"
          mv -f Flarial_DLL/Flarial.dll "./dll/beta.dll"
          git add ./dll/beta.dll
          git commit -m "Add Beta for Beta Commit: '${{ github.event.head_commit.message }}'"
          git push origin main
          echo "uploading as beta"
        if: ${{ env.OUTPUT1 == 2 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
      - name: Cache Github API
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@example.com"
          curl https://api.github.com/repos/TTF-fog/newcdn/tags > cache.txt
  
          git add cache.txt
          git commit -m "Add Cache for Tags (API)"
          git push origin main
        if: ${{ env.OUTPUT1 == 0 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
